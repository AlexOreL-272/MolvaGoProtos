// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: agent.proto

package service_agent

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Статусы заявок.
type SubmissionsStatus int32

const (
	SubmissionsStatus_SUBM_CREATED      SubmissionsStatus = 0 // Создано
	SubmissionsStatus_SUBM_IN_PROGRESS  SubmissionsStatus = 1 // В процессе
	SubmissionsStatus_SUBM_ON_INTERVIEW SubmissionsStatus = 2 // На собеседовании
	SubmissionsStatus_SUBM_DECLINED     SubmissionsStatus = 3 // Отклонено
	SubmissionsStatus_SUBM_SUSPENDED    SubmissionsStatus = 4 // Приостановлено (как будто удалено)
	SubmissionsStatus_SUBM_ACCEPTED     SubmissionsStatus = 5 // Принято
)

// Enum value maps for SubmissionsStatus.
var (
	SubmissionsStatus_name = map[int32]string{
		0: "SUBM_CREATED",
		1: "SUBM_IN_PROGRESS",
		2: "SUBM_ON_INTERVIEW",
		3: "SUBM_DECLINED",
		4: "SUBM_SUSPENDED",
		5: "SUBM_ACCEPTED",
	}
	SubmissionsStatus_value = map[string]int32{
		"SUBM_CREATED":      0,
		"SUBM_IN_PROGRESS":  1,
		"SUBM_ON_INTERVIEW": 2,
		"SUBM_DECLINED":     3,
		"SUBM_SUSPENDED":    4,
		"SUBM_ACCEPTED":     5,
	}
)

func (x SubmissionsStatus) Enum() *SubmissionsStatus {
	p := new(SubmissionsStatus)
	*p = x
	return p
}

func (x SubmissionsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmissionsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[0].Descriptor()
}

func (SubmissionsStatus) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[0]
}

func (x SubmissionsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmissionsStatus.Descriptor instead.
func (SubmissionsStatus) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0}
}

// *
// Статусы ответа.
type ResponseStatus int32

const (
	ResponseStatus_OK                    ResponseStatus = 0 // Успешно
	ResponseStatus_BAD_REQUEST           ResponseStatus = 1 // Неверный запрос
	ResponseStatus_UNAUTHORIZED          ResponseStatus = 2 // Неавторизован
	ResponseStatus_FORBIDDEN             ResponseStatus = 3 // Запрещено
	ResponseStatus_NOT_FOUND             ResponseStatus = 4 // Не найдено
	ResponseStatus_INTERNAL_SERVER_ERROR ResponseStatus = 5 // Внутренняя ошибка сервера
	ResponseStatus_REQUEST_TIMEOUT       ResponseStatus = 6 // Таймаут запроса
	ResponseStatus_NOT_IMPLEMENTED       ResponseStatus = 7 // Не реализовано
	ResponseStatus_BAD_GATEWAY           ResponseStatus = 8 // Плохой шлюз
	ResponseStatus_SERVICE_UNAVAILABLE   ResponseStatus = 9 // Сервис недоступен
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0: "OK",
		1: "BAD_REQUEST",
		2: "UNAUTHORIZED",
		3: "FORBIDDEN",
		4: "NOT_FOUND",
		5: "INTERNAL_SERVER_ERROR",
		6: "REQUEST_TIMEOUT",
		7: "NOT_IMPLEMENTED",
		8: "BAD_GATEWAY",
		9: "SERVICE_UNAVAILABLE",
	}
	ResponseStatus_value = map[string]int32{
		"OK":                    0,
		"BAD_REQUEST":           1,
		"UNAUTHORIZED":          2,
		"FORBIDDEN":             3,
		"NOT_FOUND":             4,
		"INTERNAL_SERVER_ERROR": 5,
		"REQUEST_TIMEOUT":       6,
		"NOT_IMPLEMENTED":       7,
		"BAD_GATEWAY":           8,
		"SERVICE_UNAVAILABLE":   9,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[1].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[1]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{1}
}

type ModerationStatus int32

const (
	ModerationStatus_VAC_CREATED       ModerationStatus = 0
	ModerationStatus_VAC_IN_MODERATION ModerationStatus = 1
	ModerationStatus_VAC_ACCEPTED      ModerationStatus = 2
	ModerationStatus_VAC_DECLINED      ModerationStatus = 3
)

// Enum value maps for ModerationStatus.
var (
	ModerationStatus_name = map[int32]string{
		0: "VAC_CREATED",
		1: "VAC_IN_MODERATION",
		2: "VAC_ACCEPTED",
		3: "VAC_DECLINED",
	}
	ModerationStatus_value = map[string]int32{
		"VAC_CREATED":       0,
		"VAC_IN_MODERATION": 1,
		"VAC_ACCEPTED":      2,
		"VAC_DECLINED":      3,
	}
)

func (x ModerationStatus) Enum() *ModerationStatus {
	p := new(ModerationStatus)
	*p = x
	return p
}

func (x ModerationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModerationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_proto_enumTypes[2].Descriptor()
}

func (ModerationStatus) Type() protoreflect.EnumType {
	return &file_agent_proto_enumTypes[2]
}

func (x ModerationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModerationStatus.Descriptor instead.
func (ModerationStatus) EnumDescriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{2}
}

// *
// Сообщение для изображения.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageLink string `protobuf:"bytes,1,opt,name=storage_link,json=storageLink,proto3" json:"storage_link,omitempty"` // Ссылка на хранилище
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_agent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetStorageLink() string {
	if x != nil {
		return x.StorageLink
	}
	return ""
}

type Moderation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      ModerationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=service_agent.ModerationStatus" json:"status,omitempty"`
	Description string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Moderation) Reset() {
	*x = Moderation{}
	mi := &file_agent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Moderation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Moderation) ProtoMessage() {}

func (x *Moderation) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Moderation.ProtoReflect.Descriptor instead.
func (*Moderation) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{1}
}

func (x *Moderation) GetStatus() ModerationStatus {
	if x != nil {
		return x.Status
	}
	return ModerationStatus_VAC_CREATED
}

func (x *Moderation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// *
// Сообщение для описания вакансии.
type Vacancy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                // Идентификатор вакансии
	CompanyId        string      `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`                 // Идентификатор компании
	Name             string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                            // Название вакансии
	Address          string      `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`                                      // Адрес
	WorkFormat       string      `protobuf:"bytes,5,opt,name=work_format,json=workFormat,proto3" json:"work_format,omitempty"`              // Формат работы
	AgentReward      int32       `protobuf:"varint,6,opt,name=agent_reward,json=agentReward,proto3" json:"agent_reward,omitempty"`          // Вознаграждение агента
	Salary           int32       `protobuf:"varint,7,opt,name=salary,proto3" json:"salary,omitempty"`                                       // Зарплата
	Requirements     string      `protobuf:"bytes,8,opt,name=requirements,proto3" json:"requirements,omitempty"`                            // Требования к работе
	Responsibilities string      `protobuf:"bytes,9,opt,name=responsibilities,proto3" json:"responsibilities,omitempty"`                    // Обязанности
	AdditionalInfo   string      `protobuf:"bytes,10,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"` // так называемые "плюшки" в мирошке Никиты Садовникова
	Region           string      `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`                                       // Местоположение вакансии (регион)
	IsArchived       bool        `protobuf:"varint,12,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`            // Архивирована ли вакансия (приостановлена / удалена)
	Moderated        *Moderation `protobuf:"bytes,14,opt,name=moderated,proto3" json:"moderated,omitempty"`                                 // Статус модерирования
}

func (x *Vacancy) Reset() {
	*x = Vacancy{}
	mi := &file_agent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vacancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vacancy) ProtoMessage() {}

func (x *Vacancy) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vacancy.ProtoReflect.Descriptor instead.
func (*Vacancy) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{2}
}

func (x *Vacancy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vacancy) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Vacancy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vacancy) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vacancy) GetWorkFormat() string {
	if x != nil {
		return x.WorkFormat
	}
	return ""
}

func (x *Vacancy) GetAgentReward() int32 {
	if x != nil {
		return x.AgentReward
	}
	return 0
}

func (x *Vacancy) GetSalary() int32 {
	if x != nil {
		return x.Salary
	}
	return 0
}

func (x *Vacancy) GetRequirements() string {
	if x != nil {
		return x.Requirements
	}
	return ""
}

func (x *Vacancy) GetResponsibilities() string {
	if x != nil {
		return x.Responsibilities
	}
	return ""
}

func (x *Vacancy) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *Vacancy) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Vacancy) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *Vacancy) GetModerated() *Moderation {
	if x != nil {
		return x.Moderated
	}
	return nil
}

type VacancyFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          *string `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Id           *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CompanyId    *string `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3,oneof" json:"company_id,omitempty"`
	Region       *string `protobuf:"bytes,4,opt,name=region,proto3,oneof" json:"region,omitempty"`
	SalaryBottom *int32  `protobuf:"varint,5,opt,name=salary_bottom,json=salaryBottom,proto3,oneof" json:"salary_bottom,omitempty"`
	SalaryTop    *int32  `protobuf:"varint,6,opt,name=salary_top,json=salaryTop,proto3,oneof" json:"salary_top,omitempty"`
	Mark         *string `protobuf:"bytes,7,opt,name=mark,proto3,oneof" json:"mark,omitempty"`
	IsArchived   *bool   `protobuf:"varint,8,opt,name=is_archived,json=isArchived,proto3,oneof" json:"is_archived,omitempty"`
	Amount       *int32  `protobuf:"varint,10,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Offset       *int32  `protobuf:"varint,11,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *VacancyFilters) Reset() {
	*x = VacancyFilters{}
	mi := &file_agent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VacancyFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VacancyFilters) ProtoMessage() {}

func (x *VacancyFilters) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VacancyFilters.ProtoReflect.Descriptor instead.
func (*VacancyFilters) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{3}
}

func (x *VacancyFilters) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *VacancyFilters) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VacancyFilters) GetCompanyId() string {
	if x != nil && x.CompanyId != nil {
		return *x.CompanyId
	}
	return ""
}

func (x *VacancyFilters) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *VacancyFilters) GetSalaryBottom() int32 {
	if x != nil && x.SalaryBottom != nil {
		return *x.SalaryBottom
	}
	return 0
}

func (x *VacancyFilters) GetSalaryTop() int32 {
	if x != nil && x.SalaryTop != nil {
		return *x.SalaryTop
	}
	return 0
}

func (x *VacancyFilters) GetMark() string {
	if x != nil && x.Mark != nil {
		return *x.Mark
	}
	return ""
}

func (x *VacancyFilters) GetIsArchived() bool {
	if x != nil && x.IsArchived != nil {
		return *x.IsArchived
	}
	return false
}

func (x *VacancyFilters) GetAmount() int32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *VacancyFilters) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type GetVacancyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string          `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // Идентификатор агента
	Filters *VacancyFilters `protobuf:"bytes,2,opt,name=filters,proto3,oneof" json:"filters,omitempty"`          // Фильтры:
}

func (x *GetVacancyListRequest) Reset() {
	*x = GetVacancyListRequest{}
	mi := &file_agent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVacancyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVacancyListRequest) ProtoMessage() {}

func (x *GetVacancyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVacancyListRequest.ProtoReflect.Descriptor instead.
func (*GetVacancyListRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{4}
}

func (x *GetVacancyListRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *GetVacancyListRequest) GetFilters() *VacancyFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type GetCompanyDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistributorId string `protobuf:"bytes,1,opt,name=distributor_id,json=distributorId,proto3" json:"distributor_id,omitempty"` // Идентификатор дистрибьютора
}

func (x *GetCompanyDataRequest) Reset() {
	*x = GetCompanyDataRequest{}
	mi := &file_agent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompanyDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyDataRequest) ProtoMessage() {}

func (x *GetCompanyDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyDataRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyDataRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{5}
}

func (x *GetCompanyDataRequest) GetDistributorId() string {
	if x != nil {
		return x.DistributorId
	}
	return ""
}

type SubmissionFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VacancyId *string            `protobuf:"bytes,1,opt,name=vacancy_id,json=vacancyId,proto3,oneof" json:"vacancy_id,omitempty"`
	Status    *SubmissionsStatus `protobuf:"varint,2,opt,name=status,proto3,enum=service_agent.SubmissionsStatus,oneof" json:"status,omitempty"`
}

func (x *SubmissionFilters) Reset() {
	*x = SubmissionFilters{}
	mi := &file_agent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionFilters) ProtoMessage() {}

func (x *SubmissionFilters) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionFilters.ProtoReflect.Descriptor instead.
func (*SubmissionFilters) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{6}
}

func (x *SubmissionFilters) GetVacancyId() string {
	if x != nil && x.VacancyId != nil {
		return *x.VacancyId
	}
	return ""
}

func (x *SubmissionFilters) GetStatus() SubmissionsStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return SubmissionsStatus_SUBM_CREATED
}

type GetSubmissionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string             `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // Идентификатор агента
	Filters *SubmissionFilters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`                // Фильтры
}

func (x *GetSubmissionListRequest) Reset() {
	*x = GetSubmissionListRequest{}
	mi := &file_agent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionListRequest) ProtoMessage() {}

func (x *GetSubmissionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionListRequest.ProtoReflect.Descriptor instead.
func (*GetSubmissionListRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubmissionListRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *GetSubmissionListRequest) GetFilters() *SubmissionFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

// *
// Персональные данные.
type PersonalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                  // Уникальный идентификатор
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // ФИО или название компании
	Description *string  `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`              // Описание (опционально)
	UserImage   *Image   `protobuf:"bytes,4,opt,name=user_image,json=userImage,proto3,oneof" json:"user_image,omitempty"` // Изображение пользователя (опционально)
	Experience  []string `protobuf:"bytes,5,rep,name=experience,proto3" json:"experience,omitempty"`                      // Опыт работы
	Education   []string `protobuf:"bytes,6,rep,name=education,proto3" json:"education,omitempty"`                        // Образование
	Raiting     *float32 `protobuf:"fixed32,7,opt,name=raiting,proto3,oneof" json:"raiting,omitempty"`                    // Рейтинг (опционально)
	Region      *string  `protobuf:"bytes,8,opt,name=region,proto3,oneof" json:"region,omitempty"`                        // Местоположение пользователя
}

func (x *PersonalData) Reset() {
	*x = PersonalData{}
	mi := &file_agent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalData) ProtoMessage() {}

func (x *PersonalData) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalData.ProtoReflect.Descriptor instead.
func (*PersonalData) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{8}
}

func (x *PersonalData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PersonalData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersonalData) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PersonalData) GetUserImage() *Image {
	if x != nil {
		return x.UserImage
	}
	return nil
}

func (x *PersonalData) GetExperience() []string {
	if x != nil {
		return x.Experience
	}
	return nil
}

func (x *PersonalData) GetEducation() []string {
	if x != nil {
		return x.Education
	}
	return nil
}

func (x *PersonalData) GetRaiting() float32 {
	if x != nil && x.Raiting != nil {
		return *x.Raiting
	}
	return 0
}

func (x *PersonalData) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

// *
// Полные персональные данные.
type FullPersonalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                        // Уникальный идентификатор
	Name        *string  `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`                                  // ФИО или название компании
	Description *string  `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`                    // Описание (опционально)
	UserImage   *Image   `protobuf:"bytes,4,opt,name=user_image,json=userImage,proto3,oneof" json:"user_image,omitempty"`       // Изображение пользователя (опционально)
	PhoneNumber *string  `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"` // Номер телефона (опционально)
	Email       *string  `protobuf:"bytes,6,opt,name=email,proto3,oneof" json:"email,omitempty"`                                // Электронная почта (опционально)
	Experience  []string `protobuf:"bytes,7,rep,name=experience,proto3" json:"experience,omitempty"`                            // Опыт работы
	Education   []string `protobuf:"bytes,8,rep,name=education,proto3" json:"education,omitempty"`                              // Образование
	Rating      *float32 `protobuf:"fixed32,9,opt,name=rating,proto3,oneof" json:"rating,omitempty"`                            // Рейтинг (опционально)
	AppTheme    *string  `protobuf:"bytes,10,opt,name=app_theme,json=appTheme,proto3,oneof" json:"app_theme,omitempty"`         // Тема приложения
	Region      *string  `protobuf:"bytes,11,opt,name=region,proto3,oneof" json:"region,omitempty"`                             // Местоположение пользователя
}

func (x *FullPersonalData) Reset() {
	*x = FullPersonalData{}
	mi := &file_agent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullPersonalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullPersonalData) ProtoMessage() {}

func (x *FullPersonalData) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullPersonalData.ProtoReflect.Descriptor instead.
func (*FullPersonalData) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{9}
}

func (x *FullPersonalData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FullPersonalData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FullPersonalData) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FullPersonalData) GetUserImage() *Image {
	if x != nil {
		return x.UserImage
	}
	return nil
}

func (x *FullPersonalData) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

func (x *FullPersonalData) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *FullPersonalData) GetExperience() []string {
	if x != nil {
		return x.Experience
	}
	return nil
}

func (x *FullPersonalData) GetEducation() []string {
	if x != nil {
		return x.Education
	}
	return nil
}

func (x *FullPersonalData) GetRating() float32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

func (x *FullPersonalData) GetAppTheme() string {
	if x != nil && x.AppTheme != nil {
		return *x.AppTheme
	}
	return ""
}

func (x *FullPersonalData) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

// *
// Сообщение для данных клиента.
type ClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                  // Уникальный идентификатор
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // Имя
	Surname     string  `protobuf:"bytes,3,opt,name=surname,proto3" json:"surname,omitempty"`                            // Фамилия
	Patronymic  *string `protobuf:"bytes,4,opt,name=patronymic,proto3,oneof" json:"patronymic,omitempty"`                // Отчество (опционально)
	PhoneNumber string  `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // Номер телефона
	Email       string  `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`                                // Электронная почта
	Resume      *string `protobuf:"bytes,7,opt,name=resume,proto3,oneof" json:"resume,omitempty"`                        // Резюме (опционально)
}

func (x *ClientData) Reset() {
	*x = ClientData{}
	mi := &file_agent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientData) ProtoMessage() {}

func (x *ClientData) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientData.ProtoReflect.Descriptor instead.
func (*ClientData) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{10}
}

func (x *ClientData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClientData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientData) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *ClientData) GetPatronymic() string {
	if x != nil && x.Patronymic != nil {
		return *x.Patronymic
	}
	return ""
}

func (x *ClientData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ClientData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ClientData) GetResume() string {
	if x != nil && x.Resume != nil {
		return *x.Resume
	}
	return ""
}

// *
// Сообщение для данных компании.
type CompanyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                     // Уникальный идентификатор
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                     // Название компании
	Logo        *Image   `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`                     // Логотип компании
	Description *string  `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"` // Описание (опционально)
	Feedbacks   []string `protobuf:"bytes,5,rep,name=feedbacks,proto3" json:"feedbacks,omitempty"`           // Отзывы
	Website     *string  `protobuf:"bytes,6,opt,name=website,proto3,oneof" json:"website,omitempty"`         // Вебсайт (опционально)
}

func (x *CompanyData) Reset() {
	*x = CompanyData{}
	mi := &file_agent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyData) ProtoMessage() {}

func (x *CompanyData) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyData.ProtoReflect.Descriptor instead.
func (*CompanyData) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{11}
}

func (x *CompanyData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CompanyData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyData) GetLogo() *Image {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *CompanyData) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CompanyData) GetFeedbacks() []string {
	if x != nil {
		return x.Feedbacks
	}
	return nil
}

func (x *CompanyData) GetWebsite() string {
	if x != nil && x.Website != nil {
		return *x.Website
	}
	return ""
}

// *
// Сообщение для заявки.
type Submission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId     string            `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`                      // Идентификатор агента
	Id          string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                                               // Идентификатор заявки
	Status      SubmissionsStatus `protobuf:"varint,3,opt,name=status,proto3,enum=service_agent.SubmissionsStatus" json:"status,omitempty"` // Статус заявки
	ClientData  *ClientData       `protobuf:"bytes,4,opt,name=client_data,json=clientData,proto3" json:"client_data,omitempty"`             // Данные клиента
	VacancyData *Vacancy          `protobuf:"bytes,5,opt,name=vacancy_data,json=vacancyData,proto3" json:"vacancy_data,omitempty"`          // Данные о вакансии
}

func (x *Submission) Reset() {
	*x = Submission{}
	mi := &file_agent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{12}
}

func (x *Submission) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Submission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission) GetStatus() SubmissionsStatus {
	if x != nil {
		return x.Status
	}
	return SubmissionsStatus_SUBM_CREATED
}

func (x *Submission) GetClientData() *ClientData {
	if x != nil {
		return x.ClientData
	}
	return nil
}

func (x *Submission) GetVacancyData() *Vacancy {
	if x != nil {
		return x.VacancyData
	}
	return nil
}

// *
// Сообщение для ответа с вакансиями.
type GetVacancyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId   string     `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // Идентификатор агента
	Vacancies []*Vacancy `protobuf:"bytes,2,rep,name=vacancies,proto3" json:"vacancies,omitempty"`            // Список вакансий
}

func (x *GetVacancyResponse) Reset() {
	*x = GetVacancyResponse{}
	mi := &file_agent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVacancyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVacancyResponse) ProtoMessage() {}

func (x *GetVacancyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVacancyResponse.ProtoReflect.Descriptor instead.
func (*GetVacancyResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{13}
}

func (x *GetVacancyResponse) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *GetVacancyResponse) GetVacancies() []*Vacancy {
	if x != nil {
		return x.Vacancies
	}
	return nil
}

// *
// Сообщение для запроса по идентификатору агента.
type GetByAgentIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string  `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // Идентификатор агента
	Options *string `protobuf:"bytes,2,opt,name=options,proto3,oneof" json:"options,omitempty"`          // Опции
}

func (x *GetByAgentIdRequest) Reset() {
	*x = GetByAgentIdRequest{}
	mi := &file_agent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByAgentIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByAgentIdRequest) ProtoMessage() {}

func (x *GetByAgentIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByAgentIdRequest.ProtoReflect.Descriptor instead.
func (*GetByAgentIdRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{14}
}

func (x *GetByAgentIdRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *GetByAgentIdRequest) GetOptions() string {
	if x != nil && x.Options != nil {
		return *x.Options
	}
	return ""
}

// *
// Сообщение для ответа со списком заявок.
type GetSubmissionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId     string        `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // Идентификатор агента
	Submissions []*Submission `protobuf:"bytes,2,rep,name=submissions,proto3" json:"submissions,omitempty"`        // Список заявок
}

func (x *GetSubmissionListResponse) Reset() {
	*x = GetSubmissionListResponse{}
	mi := &file_agent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubmissionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmissionListResponse) ProtoMessage() {}

func (x *GetSubmissionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmissionListResponse.ProtoReflect.Descriptor instead.
func (*GetSubmissionListResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{15}
}

func (x *GetSubmissionListResponse) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *GetSubmissionListResponse) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

// *
// Уведомление о заявке.
type SubmissionNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId      string            `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`                                             // Идентификатор агента
	SubmissionId string            `protobuf:"bytes,2,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`                              // Идентификатор заявки
	NewStatus    SubmissionsStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=service_agent.SubmissionsStatus" json:"new_status,omitempty"` // Новый статус заявки
	Output       *string           `protobuf:"bytes,4,opt,name=output,proto3,oneof" json:"output,omitempty"`                                                        // Дополнительная информация (опционально)
}

func (x *SubmissionNotification) Reset() {
	*x = SubmissionNotification{}
	mi := &file_agent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionNotification) ProtoMessage() {}

func (x *SubmissionNotification) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionNotification.ProtoReflect.Descriptor instead.
func (*SubmissionNotification) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{16}
}

func (x *SubmissionNotification) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *SubmissionNotification) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *SubmissionNotification) GetNewStatus() SubmissionsStatus {
	if x != nil {
		return x.NewStatus
	}
	return SubmissionsStatus_SUBM_CREATED
}

func (x *SubmissionNotification) GetOutput() string {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return ""
}

// *
// Уведомление о платеже.(не реализовано)
type PaymentNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId    string  `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`            // Идентификатор агента
	NewBalance float32 `protobuf:"fixed32,2,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"` // Новый баланс
}

func (x *PaymentNotification) Reset() {
	*x = PaymentNotification{}
	mi := &file_agent_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentNotification) ProtoMessage() {}

func (x *PaymentNotification) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentNotification.ProtoReflect.Descriptor instead.
func (*PaymentNotification) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{17}
}

func (x *PaymentNotification) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *PaymentNotification) GetNewBalance() float32 {
	if x != nil {
		return x.NewBalance
	}
	return 0
}

// *
// Уведомление о модерации.(не реализовано)
type ModerationNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModerationNotification) Reset() {
	*x = ModerationNotification{}
	mi := &file_agent_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModerationNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModerationNotification) ProtoMessage() {}

func (x *ModerationNotification) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModerationNotification.ProtoReflect.Descriptor instead.
func (*ModerationNotification) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{18}
}

// *
// Сообщение для ответа с обновлениями уведомлений.(не реализовано)
type GetNotificationUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionNotify *SubmissionNotification `protobuf:"bytes,1,opt,name=submission_notify,json=submissionNotify,proto3,oneof" json:"submission_notify,omitempty"` // Уведомление о заявке (опционально)
	PaymentNotify    *PaymentNotification    `protobuf:"bytes,2,opt,name=payment_notify,json=paymentNotify,proto3,oneof" json:"payment_notify,omitempty"`          // Уведомление о платеже (опционально)
	ModerationNotify *ModerationNotification `protobuf:"bytes,3,opt,name=moderation_notify,json=moderationNotify,proto3,oneof" json:"moderation_notify,omitempty"` // Уведомление о модерации (опционально)
}

func (x *GetNotificationUpdatesResponse) Reset() {
	*x = GetNotificationUpdatesResponse{}
	mi := &file_agent_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotificationUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationUpdatesResponse) ProtoMessage() {}

func (x *GetNotificationUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationUpdatesResponse.ProtoReflect.Descriptor instead.
func (*GetNotificationUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{19}
}

func (x *GetNotificationUpdatesResponse) GetSubmissionNotify() *SubmissionNotification {
	if x != nil {
		return x.SubmissionNotify
	}
	return nil
}

func (x *GetNotificationUpdatesResponse) GetPaymentNotify() *PaymentNotification {
	if x != nil {
		return x.PaymentNotify
	}
	return nil
}

func (x *GetNotificationUpdatesResponse) GetModerationNotify() *ModerationNotification {
	if x != nil {
		return x.ModerationNotify
	}
	return nil
}

// *
// Сообщение для установки ответа.
type SetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=service_agent.ResponseStatus" json:"status,omitempty"` // Статус ответа
}

func (x *SetResponse) Reset() {
	*x = SetResponse{}
	mi := &file_agent_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResponse) ProtoMessage() {}

func (x *SetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResponse.ProtoReflect.Descriptor instead.
func (*SetResponse) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{20}
}

func (x *SetResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_OK
}

// *
// Сообщение для удаления заявки.
type DeleteSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId      string `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`                // Идентификатор агента
	SubmissionId string `protobuf:"bytes,2,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"` // Идентификатор заявки
}

func (x *DeleteSubmissionRequest) Reset() {
	*x = DeleteSubmissionRequest{}
	mi := &file_agent_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubmissionRequest) ProtoMessage() {}

func (x *DeleteSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubmissionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_agent_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteSubmissionRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *DeleteSubmissionRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

var File_agent_proto protoreflect.FileDescriptor

var file_agent_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x11, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x2a, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x67, 0x0a, 0x0a, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x03, 0x0a, 0x07, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x22, 0xbd, 0x03, 0x0a, 0x0e, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0c, 0x73,
	0x61, 0x6c, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x07, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x08, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x61, 0x63, 0x61, 0x6e,
	0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x61, 0x63, 0x61,
	0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x76, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x76, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x07, 0x72, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x02, 0x52, 0x07, 0x72, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x72, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0xe4, 0x03, 0x0a, 0x10, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x02, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x61, 0x70, 0x70, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6e,
	0x79, 0x6d, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22,
	0xdf, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x22, 0xe8, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x39, 0x0a, 0x0c, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x52,
	0x0b, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x09, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x73, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0x0a, 0x13, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x18, 0x0a, 0x16,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x57, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x44, 0x0a, 0x0b, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x59, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2a, 0x8c, 0x01, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x42, 0x4d, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x42,
	0x4d, 0x5f, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x42, 0x4d, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x42, 0x4d, 0x5f, 0x53, 0x55, 0x53, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x42, 0x4d, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xc8, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42,
	0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x41, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x09, 0x2a, 0x5e, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x41, 0x43,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41,
	0x43, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x41, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x41, 0x43, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x03, 0x32, 0xbd, 0x07, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x82, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x63, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x61, 0x63, 0x61, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12,
	0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x91,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x77, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x2a, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x0f, 0x5a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_proto_rawDescOnce sync.Once
	file_agent_proto_rawDescData = file_agent_proto_rawDesc
)

func file_agent_proto_rawDescGZIP() []byte {
	file_agent_proto_rawDescOnce.Do(func() {
		file_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_proto_rawDescData)
	})
	return file_agent_proto_rawDescData
}

var file_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_agent_proto_goTypes = []any{
	(SubmissionsStatus)(0),                 // 0: service_agent.SubmissionsStatus
	(ResponseStatus)(0),                    // 1: service_agent.ResponseStatus
	(ModerationStatus)(0),                  // 2: service_agent.ModerationStatus
	(*Image)(nil),                          // 3: service_agent.Image
	(*Moderation)(nil),                     // 4: service_agent.Moderation
	(*Vacancy)(nil),                        // 5: service_agent.Vacancy
	(*VacancyFilters)(nil),                 // 6: service_agent.VacancyFilters
	(*GetVacancyListRequest)(nil),          // 7: service_agent.GetVacancyListRequest
	(*GetCompanyDataRequest)(nil),          // 8: service_agent.GetCompanyDataRequest
	(*SubmissionFilters)(nil),              // 9: service_agent.SubmissionFilters
	(*GetSubmissionListRequest)(nil),       // 10: service_agent.GetSubmissionListRequest
	(*PersonalData)(nil),                   // 11: service_agent.PersonalData
	(*FullPersonalData)(nil),               // 12: service_agent.FullPersonalData
	(*ClientData)(nil),                     // 13: service_agent.ClientData
	(*CompanyData)(nil),                    // 14: service_agent.CompanyData
	(*Submission)(nil),                     // 15: service_agent.Submission
	(*GetVacancyResponse)(nil),             // 16: service_agent.GetVacancyResponse
	(*GetByAgentIdRequest)(nil),            // 17: service_agent.GetByAgentIdRequest
	(*GetSubmissionListResponse)(nil),      // 18: service_agent.GetSubmissionListResponse
	(*SubmissionNotification)(nil),         // 19: service_agent.SubmissionNotification
	(*PaymentNotification)(nil),            // 20: service_agent.PaymentNotification
	(*ModerationNotification)(nil),         // 21: service_agent.ModerationNotification
	(*GetNotificationUpdatesResponse)(nil), // 22: service_agent.GetNotificationUpdatesResponse
	(*SetResponse)(nil),                    // 23: service_agent.SetResponse
	(*DeleteSubmissionRequest)(nil),        // 24: service_agent.DeleteSubmissionRequest
}
var file_agent_proto_depIdxs = []int32{
	2,  // 0: service_agent.Moderation.status:type_name -> service_agent.ModerationStatus
	4,  // 1: service_agent.Vacancy.moderated:type_name -> service_agent.Moderation
	6,  // 2: service_agent.GetVacancyListRequest.filters:type_name -> service_agent.VacancyFilters
	0,  // 3: service_agent.SubmissionFilters.status:type_name -> service_agent.SubmissionsStatus
	9,  // 4: service_agent.GetSubmissionListRequest.filters:type_name -> service_agent.SubmissionFilters
	3,  // 5: service_agent.PersonalData.user_image:type_name -> service_agent.Image
	3,  // 6: service_agent.FullPersonalData.user_image:type_name -> service_agent.Image
	3,  // 7: service_agent.CompanyData.logo:type_name -> service_agent.Image
	0,  // 8: service_agent.Submission.status:type_name -> service_agent.SubmissionsStatus
	13, // 9: service_agent.Submission.client_data:type_name -> service_agent.ClientData
	5,  // 10: service_agent.Submission.vacancy_data:type_name -> service_agent.Vacancy
	5,  // 11: service_agent.GetVacancyResponse.vacancies:type_name -> service_agent.Vacancy
	15, // 12: service_agent.GetSubmissionListResponse.submissions:type_name -> service_agent.Submission
	0,  // 13: service_agent.SubmissionNotification.new_status:type_name -> service_agent.SubmissionsStatus
	19, // 14: service_agent.GetNotificationUpdatesResponse.submission_notify:type_name -> service_agent.SubmissionNotification
	20, // 15: service_agent.GetNotificationUpdatesResponse.payment_notify:type_name -> service_agent.PaymentNotification
	21, // 16: service_agent.GetNotificationUpdatesResponse.moderation_notify:type_name -> service_agent.ModerationNotification
	1,  // 17: service_agent.SetResponse.status:type_name -> service_agent.ResponseStatus
	7,  // 18: service_agent.Agent.GetVacancyList:input_type -> service_agent.GetVacancyListRequest
	17, // 19: service_agent.Agent.GetProfileData:input_type -> service_agent.GetByAgentIdRequest
	10, // 20: service_agent.Agent.GetSubmissionList:input_type -> service_agent.GetSubmissionListRequest
	17, // 21: service_agent.Agent.GetNotifications:input_type -> service_agent.GetByAgentIdRequest
	8,  // 22: service_agent.Agent.GetCompanyData:input_type -> service_agent.GetCompanyDataRequest
	12, // 23: service_agent.Agent.SetProfileData:input_type -> service_agent.FullPersonalData
	24, // 24: service_agent.Agent.DeleteSubmission:input_type -> service_agent.DeleteSubmissionRequest
	16, // 25: service_agent.Agent.GetVacancyList:output_type -> service_agent.GetVacancyResponse
	11, // 26: service_agent.Agent.GetProfileData:output_type -> service_agent.PersonalData
	18, // 27: service_agent.Agent.GetSubmissionList:output_type -> service_agent.GetSubmissionListResponse
	22, // 28: service_agent.Agent.GetNotifications:output_type -> service_agent.GetNotificationUpdatesResponse
	14, // 29: service_agent.Agent.GetCompanyData:output_type -> service_agent.CompanyData
	23, // 30: service_agent.Agent.SetProfileData:output_type -> service_agent.SetResponse
	23, // 31: service_agent.Agent.DeleteSubmission:output_type -> service_agent.SetResponse
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_agent_proto_init() }
func file_agent_proto_init() {
	if File_agent_proto != nil {
		return
	}
	file_agent_proto_msgTypes[3].OneofWrappers = []any{}
	file_agent_proto_msgTypes[4].OneofWrappers = []any{}
	file_agent_proto_msgTypes[6].OneofWrappers = []any{}
	file_agent_proto_msgTypes[8].OneofWrappers = []any{}
	file_agent_proto_msgTypes[9].OneofWrappers = []any{}
	file_agent_proto_msgTypes[10].OneofWrappers = []any{}
	file_agent_proto_msgTypes[11].OneofWrappers = []any{}
	file_agent_proto_msgTypes[14].OneofWrappers = []any{}
	file_agent_proto_msgTypes[16].OneofWrappers = []any{}
	file_agent_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_proto_goTypes,
		DependencyIndexes: file_agent_proto_depIdxs,
		EnumInfos:         file_agent_proto_enumTypes,
		MessageInfos:      file_agent_proto_msgTypes,
	}.Build()
	File_agent_proto = out.File
	file_agent_proto_rawDesc = nil
	file_agent_proto_goTypes = nil
	file_agent_proto_depIdxs = nil
}
